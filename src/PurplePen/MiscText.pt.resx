<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CtrlY" xml:space="preserve">
    <value>Ctrl+Y</value>
  </data>
  <data name="Esc" xml:space="preserve">
    <value>Esc</value>
  </data>
  <data name="AllControls" xml:space="preserve">
    <value>Todos os controlos</value>
  </data>
  <data name="CannotLoadFile" xml:space="preserve">
    <value>Não é possível carregar '{0}' pelo seguinte motivo:</value>
  </data>
  <data name="CannotSaveFile" xml:space="preserve">
    <value>Não é possível gravar '{0}' pelo seguinte motivo:</value>
  </data>
  <data name="CannotLoadMapFile" xml:space="preserve">
    <value>Não é possível carregar o ficheiro do mapa '{0}' pelo seguinte motivo:</value>
  </data>
  <data name="CannotReadImageFile" xml:space="preserve">
    <value>Não é possível ler o ficheiro imagem '{0}'.</value>
  </data>
  <data name="CannotPrint" xml:space="preserve">
    <value>Não é possível imprimir '{0}' pelo seguinte motivo:</value>
  </data>
  <data name="CannotCreateFile" xml:space="preserve">
    <value>Não é possível criar '{0}' pelo seguinte motivo:</value>
  </data>
  <data name="CannotCreateDirectory" xml:space="preserve">
    <value>Não é possível criar a pasta '{0}' pelo seguinte motivo:</value>
  </data>
  <data name="CannotReadMap" xml:space="preserve">
    <value>Não é possível ler o mapa pelo seguinte motivo: '{0}' Usar Otimizar/Reparar e salvar novamente no OCAD pode resolver o problema.</value>
  </data>
  <data name="CannotCreateOcadFiles" xml:space="preserve">
    <value>Não é possível criar o ficheiro OCAD pelo seguinte motivo:</value>
  </data>
  <data name="SaveChanges" xml:space="preserve">
    <value>Quer gravar as alterações feitas em '{0}'?</value>
  </data>
  <data name="FileAlreadyExists" xml:space="preserve">
    <value>O ficheiro '{0}' já existe na pasta especificada. Clique no botão "Voltar" e escolha uma nova pasta ou um novo título para o evento.</value>
  </data>
  <data name="CodeInUse" xml:space="preserve">
    <value>O código de controlo '{0}' já está atribuído a outro controlo.</value>
  </data>
  <data name="BadScore" xml:space="preserve">
    <value>A pontuação de um posto de controlo devem ser um número inteiro de 1 a 999.</value>
  </data>
  <data name="BadClimb" xml:space="preserve">
    <value>A subida acumulada de um percurso deve ser um número 0-9999 ou deixar o campo em branco.</value>
  </data>
  <data name="BadLoad" xml:space="preserve">
    <value>O número de participantes de um percurso deve ser um número inteiro 0-999999 ou deixar o campo em branco.</value>
  </data>
  <data name="UndoWithShortcut" xml:space="preserve">
    <value>An&amp;ular</value>
  </data>
  <data name="Undo" xml:space="preserve">
    <value>Anular</value>
  </data>
  <data name="RedoWithShortcut" xml:space="preserve">
    <value>&amp;Repetir</value>
  </data>
  <data name="Redo" xml:space="preserve">
    <value>Repetir</value>
  </data>
  <data name="ClearSelectionWithShortcut" xml:space="preserve">
    <value>Limpar a Sele&amp;cção</value>
  </data>
  <data name="CancelOperationWithShortcut" xml:space="preserve">
    <value>Ca&amp;ncelar a Operação</value>
  </data>
  <data name="CancelOperation" xml:space="preserve">
    <value>Cancelar a operação</value>
  </data>
  <data name="EnterScore" xml:space="preserve">
    <value>Insira uma nova pontuação</value>
  </data>
  <data name="EnterCode" xml:space="preserve">
    <value>Insira o novo código</value>
  </data>
  <data name="EnterDimensions" xml:space="preserve">
    <value>Insira o tamanho do elemento
Use / para altura em declive
Use | para dois elementos</value>
  </data>
  <data name="EnterEventTitle" xml:space="preserve">
    <value>Insira o novo título do evento
Use | para separar linhas
(afeta todos os percursos)</value>
  </data>
  <data name="EnterSecondaryTitle" xml:space="preserve">
    <value>Insira um novo subtítulo
Use | para separar linhas</value>
  </data>
  <data name="EnterCourseName" xml:space="preserve">
    <value>Insira o novo nome do percurso</value>
  </data>
  <data name="EnterClimb" xml:space="preserve">
    <value>Digite nova subida em metros</value>
  </data>
  <data name="EnterSymbolText" xml:space="preserve">
    <value>Insira o novo significado do símbolo
(afeta todos os percursos)</value>
  </data>
  <data name="EnterTextLine" xml:space="preserve">
    <value>Insira novo texto
Use | para separar linhas</value>
  </data>
  <data name="FinishButtonText" xml:space="preserve">
    <value>Meta (&amp;F)</value>
  </data>
  <data name="ChangeTextTitle" xml:space="preserve">
    <value>Mudar o Texto</value>
  </data>
  <data name="CrashCancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="CrashSave" xml:space="preserve">
    <value>Gravar</value>
  </data>
  <data name="Black" xml:space="preserve">
    <value>Preto</value>
  </data>
  <data name="Purple" xml:space="preserve">
    <value>Púrpura</value>
  </data>
  <data name="ChangeLineAppearanceTitle" xml:space="preserve">
    <value>Alterar aparência da linha</value>
  </data>
  <data name="AutomaticLength" xml:space="preserve">
    <value>Automático</value>
  </data>
  <data name="DuplicateCourseTitle" xml:space="preserve">
    <value>Duplicar o percurso</value>
  </data>
  <data name="MapIssue_Long" xml:space="preserve">
    <value>Início cronometrado</value>
  </data>
  <data name="MapIssue_Medium" xml:space="preserve">
    <value>Início cronometrado</value>
  </data>
</root>